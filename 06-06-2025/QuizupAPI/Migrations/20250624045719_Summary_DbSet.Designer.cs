// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizupAPI.Contexts;

#nullable disable

namespace QuizupAPI.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20250624045719_Summary_DbSet")]
    partial class Summary_DbSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizupAPI.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizSubmissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizSubmissionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("QuizupAPI.Models.DTOs.Student.StudentSummaryDTO", b =>
                {
                    b.Property<long>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StudentId"));

                    b.Property<decimal>("AccuracyPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageScore")
                        .HasColumnType("numeric");

                    b.Property<int>("HighestScore")
                        .HasColumnType("integer");

                    b.Property<int>("LowestScore")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("PerformanceTrend")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("QuizzesByStatus")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("RecentActivity")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("StudentClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TotalCorrectAnswers")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuestionsAttempted")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesAvailable")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesCompleted")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesInProgress")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesSaved")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesStarted")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTimeSpentMinutes")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.ToTable("studentSummary");
                });

            modelBuilder.Entity("QuizupAPI.Models.DTOs.Teacher.TeacherSummaryDTO", b =>
                {
                    b.Property<long>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TeacherId"));

                    b.Property<decimal>("AverageCompletionRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageStudentScore")
                        .HasColumnType("numeric");

                    b.Property<int>("HighestQuizScore")
                        .HasColumnType("integer");

                    b.Property<int>("LowestQuizScore")
                        .HasColumnType("integer");

                    b.Property<decimal>("OverallAccuracyPercentage")
                        .HasColumnType("numeric");

                    b.Property<JsonDocument>("QuizPerformanceTrend")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("QuizzesByStatus")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("RecentQuizActivity")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("StudentPerformanceSummary")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TeacherEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TotalActiveQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCorrectAnswers")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalInactiveQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuestionsAnswered")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuestionsCreated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalQuizzesCreated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalStudentSubmissions")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalStudentsParticipated")
                        .HasColumnType("bigint");

                    b.HasKey("TeacherId");

                    b.ToTable("teacherSummary");
                });

            modelBuilder.Entity("QuizupAPI.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("QuizupAPI.Models.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("quizzes");
                });

            modelBuilder.Entity("QuizupAPI.Models.QuizQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("quizQuestions");
                });

            modelBuilder.Entity("QuizupAPI.Models.QuizSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SavedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubmissionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("quizSubmissions");
                });

            modelBuilder.Entity("QuizupAPI.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("students");
                });

            modelBuilder.Entity("QuizupAPI.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("QuizupAPI.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("QuizupAPI.Models.Answer", b =>
                {
                    b.HasOne("QuizupAPI.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Answer_Question");

                    b.HasOne("QuizupAPI.Models.QuizSubmission", "QuizSubmission")
                        .WithMany("Answers")
                        .HasForeignKey("QuizSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Answer_QuizSubmission");

                    b.Navigation("Question");

                    b.Navigation("QuizSubmission");
                });

            modelBuilder.Entity("QuizupAPI.Models.Quiz", b =>
                {
                    b.HasOne("QuizupAPI.Models.Teacher", "Teacher")
                        .WithMany("Quizzes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Quiz_Teacher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizupAPI.Models.QuizQuestion", b =>
                {
                    b.HasOne("QuizupAPI.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_QuizQuestion_Question");

                    b.HasOne("QuizupAPI.Models.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_QuizQuestion_Quiz");

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizupAPI.Models.QuizSubmission", b =>
                {
                    b.HasOne("QuizupAPI.Models.Quiz", "Quiz")
                        .WithMany("Submissions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_QuizSubmission_Quiz");

                    b.HasOne("QuizupAPI.Models.Student", "Student")
                        .WithMany("QuizSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_QuizSubmission_Student");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QuizupAPI.Models.Student", b =>
                {
                    b.HasOne("QuizupAPI.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("QuizupAPI.Models.Student", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizupAPI.Models.Teacher", b =>
                {
                    b.HasOne("QuizupAPI.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("QuizupAPI.Models.Teacher", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizupAPI.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("QuizupAPI.Models.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("QuizupAPI.Models.QuizSubmission", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizupAPI.Models.Student", b =>
                {
                    b.Navigation("QuizSubmissions");
                });

            modelBuilder.Entity("QuizupAPI.Models.Teacher", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizupAPI.Models.User", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
